class Pokemon:
    sound=""
    
    def __init__(self,name="",level=1):
        if(level<=0):
            raise ValueError("level should be > 0")
        if(len(name)==0):
            raise ValueError("name cannot be empty")
        self._name=name
        self._level=level
        self._master=None
        
    @property
    def master(self):
        if(self._master==None):
            print("No Master")
        else:
            return self._master
    @property
    def name(self):
        return self._name
    @property
    def level(self):
        return self._level
    @classmethod   
    def make_sound(cls):
        print(cls.sound)

    def __str__(self):
        return (f"{self.name} - Level {self.level}")

class Flying:
    fly_type=""
    @classmethod
    def fly(cls):
        print(cls.fly_type)
        
class Swimming: 
    swim_type=""
    @classmethod
    def swim(cls):
        print(cls.swim_type)
        
class Running:
    run_type=""
    @classmethod
    def run(cls):
        print(cls.run_type)


class Pikachu(Pokemon,Running):
    sound="Pika Pika"
    run_type="Pikachu running..."
    
    def attack(self):
        print(f"Electric attack with {self.level*10} damage")

class Squirtle(Pokemon,Swimming,Running):
    sound="Squirtle...Squirtle"
    run_type="Squirtle running..."
    swim_type="Squirtle swimming..."
    
    def attack(self):
        print(f"Water attack with {self.level*9} damage")

class Pidgey(Pokemon,Flying):
    sound="Pidgey...Pidgey"
    fly_type="Pidgey flying..."
   
    def attack(self):
        print(f"Air attack with {self.level*5} damage")
  
class Swanna(Pokemon,Flying,Swimming):
    sound="Swanna...Swanna"
    fly_type="Swanna flying..."
    swim_type="Swanna swimming..."

    def attack(self):
        print(f"Water attack with {self.level*9} damage")
        print(f"Air attack with {self.level*5} damage")
        
class Zapdos(Pokemon,Flying):
    sound="Zap...Zap"
    fly_type="Zapdos flying..."

    def attack(self):
        print(f"Electric attack with {self.level*10} damage")
        print(f"Air attack with {self.level*5} damage")

class Island:
    island_list=[]
    def __init__(self,name, max_no_of_pokemon=0, total_food_available_in_kgs=0):
        self._name=name
        self._max_no_of_pokemon=max_no_of_pokemon
        self._total_food_available_in_kgs=total_food_available_in_kgs
        self._pokemon_left_to_catch=0
        Island.island_list.append(self)
        
    @property
    def name(self):
        return self._name
    @property
    def max_no_of_pokemon(self):
        return self._max_no_of_pokemon
    @property
    def total_food_available_in_kgs(self):
        return self._total_food_available_in_kgs
    @property
    def pokemon_left_to_catch(self):
        return self._pokemon_left_to_catch
        
    def add_pokemon(self,pokemon):
        if(self._pokemon_left_to_catch+1>self._max_no_of_pokemon):
            print ("Island at its max pokemon capacity")
        else:
            self._pokemon_left_to_catch +=1

    @classmethod
    def get_all_islands(cls):
        l=[]
        for i in Island.island_list:
            l.append(i)
        return l
    def __str__(self):
        return (f"{self._name} - {self._pokemon_left_to_catch} pokemon - {self._total_food_available_in_kgs} food")

class Trainer:
    def __init__(self,name):
        self._name=name
        self._experience=100
        self._max_food_in_bag=1000
        self._food_in_bag=0
        self._current_island=None
        self.catch_list=[]
        
    @property
    def name(self):
        return self._name
    @property
    def experience(self):
        return self._experience
    @property
    def max_food_in_bag(self):
        return self._max_food_in_bag
    @property
    def food_in_bag(self):
        return self._food_in_bag
    @property
    def current_island(self):
        if(self._current_island==None):
            print("You are not on any island")
        else:
            return (self._current_island)

    def __str__(self):
        return self._name
    def move_to_island(self,island):
        self._current_island=island
    def catch(self,pokemon):
        if(self._experience>=100 * pokemon.level):
            print(f"You caught {pokemon._name}")
            self._experience  +=pokemon.level*20
            self.catch_list.append(pokemon)
        else:
            print(f"You need more experience to catch {pokemon.name}")
        pokemon._master=self
    def get_my_pokemon(self):
        l=[]
        for i in self.catch_list:
            l.append(i)
        return l
    def collect_food(self):
        if(self._current_island==None):
            print("Move to an island to collect food")
        else:
            if(self._food_in_bag==self._max_food_in_bag):
                pass
            elif(self._current_island._total_food_available_in_kgs>self._max_food_in_bag):
                self._food_in_bag +=self._max_food_in_bag
                self._current_island._total_food_available_in_kgs -=self._max_food_in_bag
            elif(self._current_island._total_food_available_in_kgs<self._max_food_in_bag):
                self._food_in_bag +=self._current_island._total_food_available_in_kgs
                self._current_island._total_food_available_in_kgs=0
